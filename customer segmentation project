--This project "Telecom Growth Strategies: Unlocking Customer Lifetime Value Through Smart Segmentation" is aimed at uncovering the churning activities of customers and the possible cause for the churning rate and the categories of customers affected.

--This study will then lead to segmentation of the existing users in understanding their behavioural pattern and helping to group them according to their commitment level.  This inturn will help in discovering which is low risk and high risk customer with respect to opting out of the company's services.

--Based on this, recommendations will be made in ensuring the company is able to keep its customers as well as winning back previous customers using strategies such as implementing a business policy recommendation and working with other departments for proper implementation.

--Click https://t.ly/DlIDr to see project report


SELECT * FROM "Nexa_Sat".nexa_sat
ORDER BY customer_id ASC 

--confirm current schema
SELECT current_schema();

--set path for queries
SET search_path TO "Nexa_Sat"

SELECT * FROM nexa_sat

--DATA CLEANING
--check for duplicates
SELECT *
FROM nexa_sat
GROUP BY Customer_ID,
		gender,
		Partner,
		Dependents,
		Senior_Citizen,
		Call_Duration,
		Data_Usage,
		Plan_Type,
		Plan_Level,
		Monthly_Bill_Amount,
		Tenure_Months,
		Multiple_Lines,
		Tech_Support,
		Churn
HAVING COUNT(*) >1;

--check for null values
SELECT *
FROM nexa_sat
WHERE Customer_ID IS NULL
		OR gender IS NULL
		OR Partner IS NULL
		OR Dependents IS NULL
		OR Senior_Citizen IS NULL
		OR Call_Duration IS NULL
		OR Data_Usage IS NULL
		OR Plan_Type IS NULL
		OR Plan_Level IS NULL
		OR Monthly_Bill_Amount IS NULL
		OR Tenure_Months IS NULL
		OR Multiple_Lines IS NULL
		OR Tech_Support IS NULL
		OR Churn IS NULL;

--1. EDA--------------

--i. how many users nexa_sat had previously?
SELECT COUNT(customer_id) AS previous_customerBase
FROM nexa_sat; --there were 7043 customers

--ii. of these users, how many are prepaid and postpaid customers?
SELECT plan_type, COUNT(*) AS num_users
FROM nexa_sat
WHERE LOWER(plan_type) IN ('prepaid', 'postpaid')
GROUP BY plan_type; --there were 4103 postpaid customers and 2940 prepaid customers

--iii. observing  user count according to churn based on other variables
SELECT plan_type, plan_level, tech_support, multiple_lines, dependents, partner, senior_citizen, churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1,2,3,4,5,6,7,8
ORDER BY 9 DESC;

--iv. of these users, how many are premium and basic customers?
SELECT plan_level, COUNT(*) AS num_users
FROM nexa_sat
WHERE LOWER(plan_level) IN ('premium', 'basic')
GROUP BY plan_level; --there were 3580 premium customers and 3463 basic customers

--v. of these users, how many were provided technical support and how many were not provided technical support?
SELECT tech_support, COUNT(*) AS num_users
FROM nexa_sat
WHERE LOWER(tech_support) IN ('yes', 'no')
GROUP BY tech_support; --there were 2447 customers with no access to technical support compared to 4596 
					   --with access to technical support

--vi. how many users nexa_sat currently has?
SELECT churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn = 0
GROUP BY churn; --nexa_sat currently have 4272 customers

--STUDYING CHURN ANALYSIS ON CHURNED SUBSCRIBERS
--i. how nany users had churned?
SELECT churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY churn;-- there are 2771 churned customers

--ii. churn analysis based on plan type
SELECT plan_type, churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn = 1
GROUP BY 1,2; --there are more postpaid churned customers (1928) than prepaid (843)

--iii. churn analysis based on plan level
SELECT plan_level, churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn = 1
GROUP BY 1,2; --there are more basic churned customers (2206) than premium (565)

--iv. churn analysis based on plan type and plan level
SELECT plan_type, plan_level, churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn = 1
GROUP BY 1,2,3; --customers on both the postpaid and basic category are the most churned customers

--v. churn count by plan type and plan level to view actual amount of active customers
SELECT plan_level,
	   plan_type,
	   COUNT(*) AS total_customers,
	   SUM(churn) AS churn_count,
	   COUNT(*) - SUM(churn) AS active_customers
FROM nexa_sat
GROUP BY 1, 2
ORDER BY 1; --it was discovered that users under the basic plan level and postpaid plan type had 
		    --the highest churn count
			
--2. REVENUE ANALYSIS
--i. total revenue per month before churned
SELECT ROUND(SUM(monthly_bill_amount::numeric),2) AS RPM
FROM nexa_sat; --total revenue realised is =N=1054953.70

--ii. total revenue over active subscribed months (before churned)
SELECT ROUND(SUM(monthly_bill_amount*tenure_months::numeric)::numeric,2) AS total_RAM --(revenue on active months)
FROM nexa_sat --total revenue realised is =N=27625806.60

--iii. total revenue from active customers per month based on churn level
SELECT churn, ROUND(SUM(monthly_bill_amount::numeric),2) AS RPM_on_churn_basis
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1
ORDER BY 2 DESC; --total revenue realised is =N=672974.15, total revenue lost is =N=381979.55

--iv. total revenue over active subscribed months based on churn level
SELECT churn, ROUND(SUM(monthly_bill_amount*tenure_months::numeric)::numeric,2) AS total_RAM_on_churn_basis
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1
ORDER BY 2 DESC;--total revenue realised is =N=19486089.35, total revenue lost is =N=8139717.25

--v. total revenue by plan_level on churn basis
SELECT plan_level, churn, ROUND(SUM(monthly_bill_amount::numeric),2) AS revenue
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1,2
ORDER BY 3 DESC; --total revenue realised is =N=522948.15 from Premium users and =N=426622.00 from Basic users

--vi. total revenue by plan_type on churn basis
SELECT plan_type, churn, ROUND(SUM(monthly_bill_amount::numeric),2) AS revenue
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1,2
ORDER BY 3 DESC; --total revenue realised is =N=628331.70 from Premium users and =N=150026.00 from Basic users
				 --projected loss of =N=276596.00 (over =N=200000.00) from Basic users and =N=105383.55 (over =N=100,000) from Premium users

--vii. total revenue by plan_level and plan_type on churn basis
SELECT plan_level, plan_type, churn, ROUND(SUM(monthly_bill_amount::numeric),2) AS revenue
FROM nexa_sat
WHERE churn IN (0,1)
GROUP BY 1,2,3
ORDER BY 4 DESC;--postpaid-premium subscribers with the highest revenue

--viii. average tenure by plan level
SELECT plan_level, ROUND(avg(tenure_months::numeric),2) AS average_tenure
FROM nexa_sat
GROUP BY 1
ORDER BY 2 DESC; -- Premium users spend an average of 32 months while Basic spend an average of 16 months

--ix. average tenure by plan_type
SELECT plan_type, ROUND(avg(tenure_months::numeric),2) AS average_tenure
FROM nexa_sat
GROUP BY 1
ORDER BY 2 DESC; --Postpaid users spend an average of 25 months while Prepaid spend an average of 23 months

--x churn to tenure_months comparison
SELECT ROUND(avg(tenure_months::numeric),2) AS average_tenure,
	   churn
FROM nexa_sat
WHERE churn = 0
OR	  churn = 1
GROUP BY 2
ORDER BY 1 DESC; --users who churned spend an average of 20 months compared to 27 months 
				 --spent by those who did not churn

--3. GENERAL MARKET LEVEL PERFORMANCE
SELECT plan_type, plan_level, churn, COUNT(*) AS num_users
FROM nexa_sat
WHERE churn = 1
OR churn = 0
GROUP BY 1,2,3
ORDER BY 3 DESC

--4. MARKET SEGMENTATION

--i. create table of existing users only
CREATE TABLE existing_users AS
SELECT *
FROM nexa_sat
WHERE churn = 0;

--ii. view new table
SELECT *
FROM existing_users

--iii. calculate ARPU for existing users
SELECT ROUND(AVG(monthly_bill_amount::INT),2) AS ARPU
FROM existing_users; --Average revenue per user is 157.54

--iva. calculate the CLV and add column
ALTER TABLE existing_users
ADD COLUMN clv FLOAT;

--ivb. update the table
UPDATE existing_users
SET clv = monthly_bill_amount * tenure_months;

--v. view new clv column
SELECT customer_id, clv
FROM existing_users;

--vi. setting the clv score
--clv_score = 40%*monthly_bill_amount + 10%*call_duration + 10%*data_usage + 20%*tenure_months if plan_level = 'Premium'
ALTER TABLE existing_users
ADD COLUMN clv_score FLOAT;

UPDATE existing_users
SET clv_score = (0.4*monthly_bill_amount) + 
				(0.3*tenure_months) + 
				(0.1*call_duration) +
				(0.1*data_usage) + 
				(0.1*CASE WHEN plan_level = 'Premium' 
				THEN 1 ELSE 0
				END);

-- UPDATE existing_users
-- SET clv_score = (0.4*monthly_bill_amount) + 
-- 				(0.1*call_duration) + 
-- 				(0.1*data_usage) + 
-- 				CASE WHEN plan_level = 'Premium' THEN (0.2*tenure_months)
-- 				ELSE 0
-- 				END;
				
--view new clv score column
SELECT customer_id, clv_score
FROM existing_users;
				
--vii. Average CLV based on plan_type and plan_level
select round(avg(clv_score::int),2) avg_clv, plan_type, plan_level
FROM existing_users
group by 2, 3
order by 1 desc;--Postpaid-premium users with the highest avg_clv score

--viii. group users into segments based on clv_scores
ALTER TABLE existing_users
ADD COLUMN clv_segments VARCHAR;

UPDATE existing_users
SET clv_segments = 
		CASE WHEN clv_score > (SELECT percentile_cont(0.85)
						WITHIN GROUP(ORDER BY clv_score)
						FROM existing_users) THEN 'High Value'
		     WHEN clv_score > (SELECT percentile_cont(0.50)
		     			WITHIN GROUP(ORDER BY clv_score)
		     			FROM existing_users) THEN 'Moderate Value'
		     WHEN clv_score > (SELECT percentile_cont(0.25)
		     			WITHIN GROUP(ORDER BY clv_score)
		     			FROM existing_users) THEN 'Low Value'
		     ELSE 'Churn Risk'
		     END;

--ix. view segments
SELECT customer_id, clv, clv_score, clv_segments
FROM existing_users

--5. ANALYZING THE SEGMENTS
SELECT clv_segments, COUNT(*) AS user_count
FROM existing_users
GROUP BY 1; high Value --users are low, churn risk is 1068, same as low value users

--avg bill and tenure per segment
SELECT clv_segments,
		ROUND(AVG(monthly_bill_amount::INT),2) AS avg_monthly_charges,
		ROUND(AVG(tenure_months::INT),2) AS avg_tenure
FROM existing_users
GROUP BY 1;

--tech support and multiple lines percent
SELECT clv_segments,
		ROUND(AVG(CASE WHEN tech_support = 'Yes' THEN 1 ELSE 0 END::INT),2) AS tech_support_level,
		ROUND(AVG(CASE WHEN multiple_lines = 'Yes' THEN 1 ELSE 0 END::INT),2) AS multiple_lines_level
FROM existing_users
GROUP BY 1;

--Revenue per segment
SELECT clv_segments, COUNT(customer_id) AS num_of_customers,
		CAST(SUM(monthly_bill_amount + tenure_months) AS NUMERIC(10,2)) AS total_revenue
FROM existing_users
GROUP BY 1
ORDER BY 3 DESC; --more work need to be done to keep subscribers otherwise the company will keep running at a loss

--CROSS-SELLING AND UP-SELLING
--cross-selling tech support to senior citizens
SELECT customer_id
FROM existing_users
WHERE senior_citizen = 1
AND dependents = 'No' --no children or tech savvy helpers
AND tech_support = 'No' --do not already have this service
AND (clv_segments = 'Churn Risk' OR clv_segments = 'Low Value');

--cross-selling: multiple lines for partners and dependents
SELECT customer_id
FROM existing_users
WHERE multiple_lines = 'No'
AND (dependents = 'Yes' OR partner = 'Yes')
AND plan_level = 'Basic';

--up-selling: premium discount for basic users with churn risk
SELECT customer_id
FROM existing_users
WHERE clv_segments = 'Churn Risk'
AND plan_level = 'Basic'

--up-selling: basic to premium for longer lock in period and higher ARPU
SELECT plan_level, ROUND(AVG(monthly_bill_amount::INT),2) AS avg_monthly_bill, ROUND(AVG(tenure_months::INT),2) AS avg_tenure
FROM existing_users
WHERE clv_segments = 'High Value'
OR clv_segments = 'Moderate Value'
GROUP BY 1;

--getting the customers where plan_level is basic
SELECT customer_id, monthly_bill_amount
FROM existing_users
WHERE plan_level = 'Basic'
AND (clv_segments = 'High Value' OR clv_segments = 'Moderate Value')
AND monthly_bill_amount > 150;